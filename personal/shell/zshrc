################################################################################
# SHELL
################################################################################

export SCM="${HOME}/Developer"
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LESSCHARSET=UTF-8
export EDITOR=nvim
export DISPLAY="`grep nameserver /etc/resolv.conf | sed 's/nameserver //'`:0"

# Assign $OS the value of either 'darwin', 'arch', or 'WSL2'.
# This is useful for scripts to use later.
if [[ "$(uname | tr '[A-Z]' '[a-z]')" == 'darwin' ]]; then
    export OS='darwin'
elif uname -r | grep --quiet arch; then
    export OS='arch'
elif uname -r | grep --quiet WSL2; then
    export OS='WSL2'
else
    echo 'Unknown OS' >&2
    print_usage
    exit 1
fi

################################################################################
# ZSH CONFIGURATION
################################################################################

USE_POWERLINE="true"
CASE_SENSITIVE="true"
DISABLE_UPDATE_PROMPT="true"

setopt nobeep                # No beep (grr)
setopt autocd                # No need to type cd to... uh... cd
setopt share_history         # A bunch of history things
setopt hist_expire_dups_first
setopt append_history
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt extendedglob          # Extended globbing. Allows using regex with *
setopt nocaseglob            # Case insensitive globbing
setopt rcexpandparam         # Array expansion with parameters
setopt numericglobsort       # Sort filenames numerically when it makes sense

LS_COLORS='rs=0:di=0;35:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30:ow=34:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:';
export LS_COLORS

# zsh-completions:         https://github.com/zsh-users/zsh-completions
# zsh-syntax-highlighting: https://github.com/zsh-users/zsh-syntax-highlighting

plugins=(
  colored-man-pages
  colorize
  command-not-found
  themes
  zsh-autosuggestions
  zsh-completions
  zsh-syntax-highlighting
)

# Offer to install missing package if command is not found
if [[ -r /usr/share/zsh/functions/command-not-found.zsh ]]; then
    source /usr/share/zsh/functions/command-not-found.zsh
    export PKGFILE_PROMPT_INSTALL_MISSING=1
fi

################################################################################
# STARSHIP PROMPT
################################################################################

export STARSHIP_CONFIG=~/example/non/default/path/starship.toml

################################################################################
# PATHS
################################################################################

export PATH=$PATH:"${HOME}/bin"

################################################################################
# GPG
################################################################################

export GPG_TTY=$(tty)

################################################################################
# ALIASES
################################################################################

alias zshconfig="mate ~/.zshrc"
alias clip="xclip -sel clip"
alias bat="batcat"
alias cddev="cd ${SCM}"
alias cdnotes="cd ${SCM}/obsidian-vault"
alias cddots="cd ${SCM}/dotfiles/personal"
alias cdcurr="cd ${SCM}/TEngine"
alias cdcgra="cd ${SCM}/cgra151-graphics"
alias notugly="clang-format -i -style=Google"
alias font-test="echo -e '\e[1mbold\e[0m\n\e[3mitalic\e[0m\n\e[4munderline\e[0m\n\e[9mstrikethrough\e[0m'"

batdiff() {
    git diff --name-only --relative --diff-filter=d | xargs bat --diff
}


################################################################################
# VIM MODE CONFIG
################################################################################

bindkey -v
export KEYTIMEOUT=1

# Change cursor shape for different vi modes.
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}

zle -N zle-keymap-select

zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}

zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.

preexec() {
    echo -ne '\e[5 q'
} # Use beam shape cursor for each new prompt.



###############################################################################
# STANFORD QUICKJUMP
################################################################################

# usage: cs106b ch08
cs106b() {
    if [[ $# -ne 1 ]]; then
        echo "usage: cs106b dir" >&2
        return 1
    fi

    local CS106B=${SCM}/stanford-cs106b/programming-abstractions-cpp

    cd "$(find $CS106B -maxdepth 1 -name "*${1}*" -print)"
}


###############################################################################
# SIT/STAND TIMER
################################################################################

# Sitting. Set a 20 min timer before transitioning to stand.
# http://ergo.human.cornell.edu/CUESitStand.html
sitting() {
    clear
    timer_announce $(( 20 * 60 )) "Time to stand up"
}

# Standing. Set an 8 min timer before transitioning to walking around a bit.
# http://ergo.human.cornell.edu/CUESitStand.html
standing() {
    clear
    timer_announce $(( 8 * 60 )) "Time to walk around a bit"
}

# Walking. Set a 2 min timer before transitioning to sitting.
# http://ergo.human.cornell.edu/CUESitStand.html
walking() {
    clear
    timer_announce $(( 2 * 60 )) "Time to sit down"
}

# Play an announcement sound and display message after a timer (seconds) elapses.
# $1: duration (secs)
# $2: terminal message
timer_announce() {
    if [[ $# -ne 2 ]]; then
        echo "usage: timer_sound duration msg" >&2
        return 1
    fi

    # Start a countdown timer
    timeout $1 countdown $1
    # Replace timer text with msg
    printf "\033[2K\r%s\n" ${2}

    case "${OS}" in
        'darwin')
            say "${2}"
            ;;
        'arch')
            echo "TODO..." >&2
            ;;
        'WSL2')
            powershell.exe "Add-Type -AssemblyName System.speech;\$speak=New-Object System.Speech.Synthesis.SpeechSynthesizer;\$speak.SelectVoice(\"Microsoft Zira Desktop\");\$speak.Speak(\"${2}\")"
            ;;
        *)
            echo "unsupported OS" >&2
        ;;
    esac

    # Start a stopwatch to track how long I've gone over
    stopwatch 
}


################################################################################
# ZSH INITIALISATION
################################################################################

autoload -Uz compinit
compinit

# zsh-autosuggestions:     https://github.com/zsh-users/zsh-autosuggestions
source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh

eval "$(starship init zsh)"

