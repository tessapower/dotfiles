#!/usr/bin/env bash
set -e

echo " Setting up macOS environment..."

# Get the dotfiles directory (repo root where this script lives)
DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

echo "Using dotfiles from: $DOTFILES_DIR"

# Install Homebrew if not installed
if ! command -v brew &> /dev/null; then
    echo " Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    # Add Homebrew to PATH for Apple Silicon Macs
    if [[ $(uname -m) == 'arm64' ]]; then
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
fi

# Update Homebrew
echo " Updating Homebrew..."
brew update

# Install packages
echo " Installing packages..."
brew install \
    zsh \
    neovim \
    git \
    starship \
    eza \
    bat \
    ripgrep \
    fd \
    fzf \
    lazygit \
    zsh-autosuggestions \
    zsh-syntax-highlighting

# Install Nerd Fonts
echo "󰛖 Installing Nerd Fonts..."
brew tap homebrew/cask-fonts
brew install --cask font-jetbrains-mono-nerd-font
brew install --cask font-recursive-code-nerd-font
brew install --cask font-roboto-mono-nerd-font

# Set zsh as default shell (should already be default on modern macOS)
if [ "$SHELL" != "$(which zsh)" ]; then
    echo "  Setting zsh as default shell..."
    chsh -s $(which zsh)
fi

# Create necessary directories
mkdir -p ~/.config
mkdir -p ~/Developer/dotfiles

# Symlink dotfiles
echo "  Creating symlinks..."

# ZSH config - source shared base, then macOS-specific
cat > ~/.zshrc << EOF
# Generated by setup-macos.sh
# Sources shared and macOS-specific configs

# Source shared ZSH config
if [[ -f "${DOTFILES_DIR}/shell/shared/.zshrc" ]]; then
    source "${DOTFILES_DIR}/shell/shared/.zshrc"
fi

# Source macOS-specific additions
if [[ -f "${DOTFILES_DIR}/shell/macos/.zshrc" ]]; then
    source "${DOTFILES_DIR}/shell/macos/.zshrc"
fi
EOF
echo "✓ Created composite .zshrc"

# Starship config
ln -sf "${DOTFILES_DIR}/config/shared/starship.toml" ~/.config/starship.toml
echo "✓ Linked starship.toml"

# Neovim config (check both vim/ and config/shared/nvim/)
if [ -d "${DOTFILES_DIR}/vim" ]; then
    rm -rf ~/.config/nvim
    ln -sf "${DOTFILES_DIR}/vim" ~/.config/nvim
    echo "✓ Linked nvim config (from vim/)"
elif [ -d "${DOTFILES_DIR}/config/shared/nvim" ]; then
    rm -rf ~/.config/nvim
    ln -sf "${DOTFILES_DIR}/config/shared/nvim" ~/.config/nvim
    echo "✓ Linked nvim config (from config/shared/nvim/)"
fi

# Git config
if [ -f "${DOTFILES_DIR}/git/.gitconfig" ]; then
    ln -sf "${DOTFILES_DIR}/git/.gitconfig" ~/.gitconfig
    echo "✓ Linked .gitconfig"
fi

# Git ignore global
if [ -f "${DOTFILES_DIR}/git/.gitignore_global" ]; then
    ln -sf "${DOTFILES_DIR}/git/.gitignore_global" ~/.gitignore_global
    echo "✓ Linked .gitignore_global"
fi

# Bin directories - create composite bin with all relevant scripts
mkdir -p ~/bin
# Link shared scripts
if [ -d "${DOTFILES_DIR}/bin/shared" ]; then
    for script in "${DOTFILES_DIR}/bin/shared/"*; do
        if [ -f "$script" ]; then
            ln -sf "$script" ~/bin/$(basename "$script")
        fi
    done
    echo "✓ Linked shared bin scripts"
fi

# Link macOS-specific scripts
if [ -d "${DOTFILES_DIR}/bin/macos" ]; then
    for script in "${DOTFILES_DIR}/bin/macos/"*; do
        if [ -f "$script" ]; then
            ln -sf "$script" ~/bin/$(basename "$script")
        fi
    done
    echo "✓ Linked macOS-specific bin scripts"
fi

# Make all scripts in ~/bin executable
chmod +x ~/bin/* 2>/dev/null || true

# Kitty config (if exists)
if [ -d "${DOTFILES_DIR}/config/macos/kitty" ]; then
    mkdir -p ~/.config
    ln -sf "${DOTFILES_DIR}/config/macos/kitty" ~/.config/kitty
    echo "✓ Linked kitty config"
fi

# iTerm2 config (if exists)
if [ -d "${DOTFILES_DIR}/config/macos/iterm2" ]; then
    echo "󰋼  iTerm2 config found at ${DOTFILES_DIR}/config/macos/iterm2"
    echo "   Configure iTerm2 to load preferences from this directory:"
    echo "   Preferences → General → Preferences → Load preferences from a custom folder"
fi

# Terminal choice recommendation
echo ""
echo "󰇄  Terminal recommendations for macOS:"
echo "  • iTerm2: brew install --cask iterm2"
echo "  • Kitty: brew install --cask kitty"
echo "  • Ghostty: Check https://ghostty.org for installation"
echo ""

echo "  macOS setup complete!"
echo ""
echo "  Next steps:"
echo "  1. Close and reopen your terminal (or run 'exec zsh')"
echo "  2. Configure git if needed"
echo "  3. Choose and install a terminal emulator"
echo ""